"Project","ScanDate","DependencyName","DependencyPath","Description","License","Md5","Sha1","Identifiers","CPE","CVE","CWE","Vulnerability","Source","CVSSv2_Severity","CVSSv2_Score","CVSSv2","CVSSv3_BaseSeverity","CVSSv3_BaseScore","CVSSv3","CVSSv4_BaseSeverity","CVSSv4_BaseScore","CVSSv4","CPE Confidence","Evidence Count","VendorProject","Product","Name","DateAdded","ShortDescription","RequiredAction","DueDate","Notes"
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",@babel/runtime-corejs3:7.17.2,/github/workspace/package-lock.json?aria-query:4.2.2/@babel/runtime-corejs3:^7.10.2,babel's modular runtime helpers with core-js@3 polyfilling,MIT,"","",pkg:npm/%40babel%2Fruntime-corejs3@7.17.2,"",GHSA-968p-4wvh-cqc8,CWE-1333 Inefficient Regular Expression Complexity,"### Impact  When using Babel to compile [regular expression named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group), Babel will generate a polyfill for the `.replace` method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to `.replace`).  Your generated code is vulnerable if _all_ the following conditions are true: - You use Babel to compile [regular expression named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group) - You use the `.replace` method on a regular expression that contains named capturing groups - **Your code uses untrusted strings as the second argument of `.replace`**  If you are using `@babel/preset-env` with the [`targets`](https://babeljs.io/docs/options#targets) option, the transform that injects the vulnerable code is automatically enabled if: - you use [_duplicated_ named capturing groups](https://github.com/tc39/proposal-duplicate-named-capturing-groups), and target any browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 - you use any [named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group), and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10  You can verify what transforms `@babel/preset-env` is using by enabling the [`debug` option](https://babeljs.io/docs/babel-preset-env#debug).   ### Patches  This problem has been fixed in `@babel/helpers` and `@babel/runtime` 7.26.10 and 8.0.0-alpha.17, please upgrade. It's likely that you do not directly depend on `@babel/helpers`, and instead you depend on `@babel/core` (which itself depends on `@babel/helpers`). Upgrading to `@babel/core` 7.26.10 is not required, but it guarantees that you are on a new enough `@babel/helpers` version.  Please note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.  ### Workarounds  If you are passing user-provided strings as the second argument of `.replace` on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring `$<` if it's then not followed by `>` (possibly with other characters in between).  ### References  This vulnerability was reported and fixed in https://github.com/babel/babel/pull/17173.",NPM,"","","",MEDIUM,6.199999809265137,CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,6,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",@babel/runtime:7.17.2,/github/workspace/package-lock.json?react-focus-lock:2.5.2/@babel/runtime:^7.0.0,babel's modular runtime helpers,MIT,"","",pkg:npm/%40babel%2Fruntime@7.17.2,"",GHSA-968p-4wvh-cqc8,CWE-1333 Inefficient Regular Expression Complexity,"### Impact  When using Babel to compile [regular expression named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group), Babel will generate a polyfill for the `.replace` method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to `.replace`).  Your generated code is vulnerable if _all_ the following conditions are true: - You use Babel to compile [regular expression named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group) - You use the `.replace` method on a regular expression that contains named capturing groups - **Your code uses untrusted strings as the second argument of `.replace`**  If you are using `@babel/preset-env` with the [`targets`](https://babeljs.io/docs/options#targets) option, the transform that injects the vulnerable code is automatically enabled if: - you use [_duplicated_ named capturing groups](https://github.com/tc39/proposal-duplicate-named-capturing-groups), and target any browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 - you use any [named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group), and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10  You can verify what transforms `@babel/preset-env` is using by enabling the [`debug` option](https://babeljs.io/docs/babel-preset-env#debug).   ### Patches  This problem has been fixed in `@babel/helpers` and `@babel/runtime` 7.26.10 and 8.0.0-alpha.17, please upgrade. It's likely that you do not directly depend on `@babel/helpers`, and instead you depend on `@babel/core` (which itself depends on `@babel/helpers`). Upgrading to `@babel/core` 7.26.10 is not required, but it guarantees that you are on a new enough `@babel/helpers` version.  Please note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.  ### Workarounds  If you are passing user-provided strings as the second argument of `.replace` on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring `$<` if it's then not followed by `>` (possibly with other characters in between).  ### References  This vulnerability was reported and fixed in https://github.com/babel/babel/pull/17173.",NPM,"","","",MEDIUM,6.199999809265137,CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",@google-cloud/firestore:4.15.1,/github/workspace/functions/package-lock.json?@google-cloud/firestore,"","","","",pkg:npm/%40google-cloud%2Ffirestore@4.15.1,"",GHSA-4g6q-77j7-vvjc,"CWE-532 Insertion of Sensitive Information into Log File, CWE-922 Insecure Storage of Sensitive Information",A potential logging of the firestore key via logging within nodejs-firestore exists - Developers who were logging objects through this._settings would be logging the firestore key as well potentially exposing it to anyone with logs read access. We recommend upgrading to version 6.1.0 to avoid this issue,NPM,"","","",MEDIUM,4.0,CVSS:3.1/AV:L/AC:H/PR:H/UI:R/S:U/C:H/I:N/A:N,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",@grpc/grpc-js:1.5.7,/github/workspace/functions/package-lock.json?@grpc/grpc-js,"","","","",pkg:npm/%40grpc%2Fgrpc-js@1.5.7,"",GHSA-7v5v-9h63-cj86,CWE-789 Memory Allocation with Excessive Size Value,"### Impact There are two separate code paths in which memory can be allocated per message in excess of the `grpc.max_receive_message_length` channel option:   1. If an incoming message has a size on the wire greater than the configured limit, the entire message is buffered before it is discarded.  2. If an incoming message has a size within the limit on the wire but decompresses to a size greater than the limit, the entire message is decompressed into memory, and on the server is not discarded.  ### Patches  This has been patched in versions 1.10.9, 1.9.15, and 1.8.22",NPM,"","","",MEDIUM,5.300000190734863,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",body-parser:1.19.2,/github/workspace/package-lock.json?express:4.17.3/body-parser:1.19.2,Node.js body parsing middleware,MIT,"","",pkg:npm/body-parser@1.19.2,"",CVE-2024-45590,CWE-405 Asymmetric Resource Consumption (Amplification),"body-parser is Node.js body parsing middleware. body-parser <1.20.3 is vulnerable to denial of service when url encoding is enabled. A malicious actor using a specially crafted payload could flood the server with a large number of requests, resulting in denial of service. This issue is patched in 1.20.3.  Sonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2024-45590 for details",OSSINDEX,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,5,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",body-parser:1.19.2,/github/workspace/package-lock.json?express:4.17.3/body-parser:1.19.2,Node.js body parsing middleware,MIT,"","",pkg:npm/body-parser@1.19.2,"",GHSA-qwcr-r2fm-qrc7,CWE-405 Asymmetric Resource Consumption (Amplification),"### Impact  body-parser <1.20.3 is vulnerable to denial of service when url encoding is enabled. A malicious actor using a specially crafted payload could flood the server with a large number of requests, resulting in denial of service.  ### Patches  this issue is patched in 1.20.3  ### References",NPM,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,5,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",brace-expansion:1.1.11,/github/workspace/package-lock.json?minimatch:3.1.2/brace-expansion:^1.1.7,Brace expansion as known from sh/bash,MIT,"","",pkg:npm/brace-expansion@1.1.11,cpe:2.3:a:brace_expansion_project:brace_expansion:1.1.11:*:*:*:*:*:*:*,CVE-2025-5889,CWE-1333 Inefficient Regular Expression Complexity,"A vulnerability was found in juliangruber brace-expansion up to 1.1.11/2.0.1/3.0.0/4.0.0. It has been rated as problematic. Affected by this issue is the function expand of the file index.js. The manipulation leads to inefficient regular expression complexity. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 1.1.12, 2.0.2, 3.0.1 and 4.0.1 is able to address this issue. The name of the patch is a5b98a4f30d7813266b221435e1eaaf25a1b0ac5. It is recommended to upgrade the affected component.",OSSINDEX,MEDIUM,6.0,CVSS:4.0/AV:N/AC:H/AT:N/PR:L/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N,"","","","","","",HIGHEST,9,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",brace-expansion:1.1.11,/github/workspace/package-lock.json?minimatch:3.1.2/brace-expansion:^1.1.7,Brace expansion as known from sh/bash,MIT,"","",pkg:npm/brace-expansion@1.1.11,cpe:2.3:a:brace_expansion_project:brace_expansion:1.1.11:*:*:*:*:*:*:*,GHSA-v6h2-p8h4-qcjw,CWE-400 Uncontrolled Resource Consumption,"A vulnerability was found in juliangruber brace-expansion up to 1.1.11/2.0.1/3.0.0/4.0.0. It has been rated as problematic. Affected by this issue is the function expand of the file index.js. The manipulation leads to inefficient regular expression complexity. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 1.1.12, 2.0.2, 3.0.1 and 4.0.1 is able to address this issue. The name of the patch is `a5b98a4f30d7813266b221435e1eaaf25a1b0ac5`. It is recommended to upgrade the affected component.",NPM,"","","",LOW,3.0999999046325684,CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L,"","","",HIGHEST,9,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",braces:3.0.2,/github/workspace/package-lock.json?micromatch:4.0.4/braces:^3.0.1,"Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support for the Bash 4.3 braces specification, without sacrificing speed.",MIT,"","",pkg:npm/braces@3.0.2,cpe:2.3:a:braces_project:braces:3.0.2:*:*:*:*:*:*:*,CVE-2024-4068,CWE-1050 Excessive Platform Resource Consumption within a Loop,"The NPM package `braces`, versions prior to 3.0.3, fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In `lib/parse.js,` if a malicious user sends ""imbalanced braces"" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash.",OSSINDEX,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,8,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",braces:3.0.2,/github/workspace/package-lock.json?micromatch:4.0.4/braces:^3.0.1,"Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support for the Bash 4.3 braces specification, without sacrificing speed.",MIT,"","",pkg:npm/braces@3.0.2,cpe:2.3:a:braces_project:braces:3.0.2:*:*:*:*:*:*:*,GHSA-grv7-fg5c-xmjg,"CWE-400 Uncontrolled Resource Consumption, CWE-1050 Excessive Platform Resource Consumption within a Loop","The NPM package `braces` fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In `lib/parse.js,` if a malicious user sends ""imbalanced braces"" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash.",NPM,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,8,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",cookie:0.4.2,/github/workspace/package-lock.json?nookies:2.5.2/cookie:^0.4.1,HTTP server cookie parsing and serialization,MIT,"","",pkg:npm/cookie@0.4.2,"",CVE-2024-47764,CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'),"cookie is a basic HTTP cookie parser and serializer for HTTP servers. The cookie name could be used to set other fields of the cookie, resulting in an unexpected cookie value. A similar escape can be used for path and domain, which could be abused to alter other fields of the cookie. Upgrade to 0.7.0, which updates the validation for name, path, and domain.",OSSINDEX,MEDIUM,6.900000095367432,CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:L/VA:N/SC:N/SI:N/SA:N,"","","","","","",HIGHEST,6,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",cookie:0.4.2,/github/workspace/package-lock.json?nookies:2.5.2/cookie:^0.4.1,HTTP server cookie parsing and serialization,MIT,"","",pkg:npm/cookie@0.4.2,"",GHSA-pxg6-pf52-xh8x,CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'),"### Impact  The cookie name could be used to set other fields of the cookie, resulting in an unexpected cookie value. For example, `serialize(""userName=<script>alert('XSS3')</script>; Max-Age=2592000; a"", value)` would result in `""userName=<script>alert('XSS3')</script>; Max-Age=2592000; a=test""`, setting `userName` cookie to `<script>` and ignoring `value`.  A similar escape can be used for `path` and `domain`, which could be abused to alter other fields of the cookie.  ### Patches  Upgrade to 0.7.0, which updates the validation for `name`, `path`, and `domain`.  ### Workarounds  Avoid passing untrusted or arbitrary values for these fields, ensure they are set by the application instead of user input.  ### References  * https://github.com/jshttp/cookie/pull/167",NPM,"","","","","","","","","",HIGHEST,6,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",cross-spawn:7.0.3,/github/workspace/package-lock.json?eslint:8.10.0/cross-spawn:^7.0.2,Cross platform child_process#spawn and child_process#spawnSync,MIT,"","",pkg:npm/cross-spawn@7.0.3,"",CVE-2024-21538,CWE-1333 Inefficient Regular Expression Complexity,"Versions of the package cross-spawn before 6.0.6, from 7.0.0 and before 7.0.5 are vulnerable to Regular Expression Denial of Service (ReDoS) due to improper input sanitization. An attacker can increase the CPU usage and crash the program by crafting a very large and well crafted string.",OSSINDEX,HIGH,8.699999809265137,CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N,"","","","","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",cross-spawn:7.0.3,/github/workspace/package-lock.json?eslint:8.10.0/cross-spawn:^7.0.2,Cross platform child_process#spawn and child_process#spawnSync,MIT,"","",pkg:npm/cross-spawn@7.0.3,"",GHSA-3xgq-45jj-v275,CWE-1333 Inefficient Regular Expression Complexity,Versions of the package cross-spawn before 7.0.5 are vulnerable to Regular Expression Denial of Service (ReDoS) due to improper input sanitization. An attacker can increase the CPU usage and crash the program by crafting a very large and well crafted string.,NPM,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",dicer:0.3.1,/github/workspace/functions/package-lock.json?dicer,"","","","",pkg:npm/dicer@0.3.1,"",GHSA-wm7h-9275-46v2,CWE-248 Uncaught Exception,This affects all versions of the package `dicer`. A malicious attacker can send a modified form to the server and crash the Node.js service. A complete denial of service can be achieved by sending the malicious form in a loop.,NPM,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",express:4.17.3,/github/workspace/package-lock.json?firebase-functions:4.9.0/express:^4.17.1,"Fast, unopinionated, minimalist web framework",MIT,"","",pkg:npm/express@4.17.3,"",CVE-2024-29041,CWE-1286 Improper Validation of Syntactic Correctness of Input,"Express.js minimalist web framework for node. Versions of Express.js prior to 4.19.0 and all pre-release alpha and beta versions of 5.0 are affected by an open redirect vulnerability using malformed URLs. When a user of Express performs a redirect using a user-provided URL Express performs an encode [using `encodeurl`](https://github.com/pillarjs/encodeurl) on the contents before passing it to the `location` header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list. The main method impacted is `res.location()` but this is also called from within `res.redirect()`. The vulnerability is fixed in 4.19.2 and 5.0.0-beta.3.",OSSINDEX,"","","",MEDIUM,6.099999904632568,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,"","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",express:4.17.3,/github/workspace/package-lock.json?firebase-functions:4.9.0/express:^4.17.1,"Fast, unopinionated, minimalist web framework",MIT,"","",pkg:npm/express@4.17.3,"",GHSA-rv95-896h-c2vc,"CWE-601 URL Redirection to Untrusted Site ('Open Redirect'), CWE-1286 Improper Validation of Syntactic Correctness of Input","### Impact  Versions of Express.js prior to 4.19.2 and pre-release alpha and beta versions before 5.0.0-beta.3 are affected by an open redirect vulnerability using malformed URLs.  When a user of Express performs a redirect using a user-provided URL Express performs an encode [using `encodeurl`](https://github.com/pillarjs/encodeurl) on the contents before passing it to the `location` header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list.  The main method impacted is `res.location()` but this is also called from within `res.redirect()`.  ### Patches  https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94  An initial fix went out with `express@4.19.0`, we then patched a feature regression in `4.19.1` and added improved handling for the bypass in `4.19.2`.  ### Workarounds  The fix for this involves pre-parsing the url string with either `require('node:url').parse` or `new URL`. These are steps you can take on your own before passing the user input string to `res.location` or `res.redirect`.  ### References  https://github.com/expressjs/express/pull/5539 https://github.com/koajs/koa/issues/1800 https://expressjs.com/en/4x/api.html#res.location",NPM,"","","",MEDIUM,6.099999904632568,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,"","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",express:4.17.3,/github/workspace/package-lock.json?firebase-functions:4.9.0/express:^4.17.1,"Fast, unopinionated, minimalist web framework",MIT,"","",pkg:npm/express@4.17.3,"",CVE-2024-10491,CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'),"A vulnerability has been identified in the Express response.links function, allowing for arbitrary resource injection in the Link header when unsanitized data is used.  The issue arises from improper sanitization in `Link` header values, which can allow a combination of characters like `,`, `;`, and `<>` to preload malicious resources.  This vulnerability is especially relevant for dynamic parameters.  Sonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2024-10491 for details",OSSINDEX,"","","",MEDIUM,5.300000190734863,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N,"","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",express:4.17.3,/github/workspace/package-lock.json?firebase-functions:4.9.0/express:^4.17.1,"Fast, unopinionated, minimalist web framework",MIT,"","",pkg:npm/express@4.17.3,"",GHSA-qw6h-vgh9-j6wx,CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),"### Impact  In express <4.20.0, passing untrusted user input - even after sanitizing it - to `response.redirect()` may execute untrusted code  ### Patches  this issue is patched in express 4.20.0  ### Workarounds  users are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist  ### Details  successful exploitation of this vector requires the following:  1. The attacker MUST control the input to response.redirect() 1. express MUST NOT redirect before the template appears 1. the browser MUST NOT complete redirection before: 1. the user MUST click on the link in the template",NPM,"","","",MEDIUM,5.0,CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L,"","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",express:4.17.3,/github/workspace/package-lock.json?firebase-functions:4.9.0/express:^4.17.1,"Fast, unopinionated, minimalist web framework",MIT,"","",pkg:npm/express@4.17.3,"",CVE-2024-43796,CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),"Express.js minimalist web framework for node. In express < 4.20.0, passing untrusted user input - even after sanitizing it - to response.redirect() may execute untrusted code. This issue is patched in express 4.20.0.",OSSINDEX,"","","",MEDIUM,4.699999809265137,CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:L/A:N,"","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",jose:2.0.5,/github/workspace/functions/package-lock.json?jose,"","","","",pkg:npm/jose@2.0.5,"",CVE-2022-36083,CWE-400 Uncontrolled Resource Consumption,"JOSE is ""JSON Web Almost Everything"" - JWA, JWS, JWE, JWT, JWK, JWKS with no dependencies using runtime's native crypto in Node.js, Browser, Cloudflare Workers, Electron, and Deno. The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named `p2c` PBES2 Count, which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive. This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish. Under certain conditions, it is possible to have the user's environment consume unreasonable amount of CPU time. The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (`alg` Header Parameter) using the `keyManagementAlgorithms` (or `algorithms` in v1.x) decryption option or through other means. The `v1.28.2`, `v2.0.6`, `v3.20.4`, and `v4.9.2` releases limit the maximum PBKDF2 iteration count to `10000` by default. It is possible to adjust this limit with a newly introduced `maxPBES2Count` decryption option. If users are unable to upgrade their required library version, they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms. They can use the `keyManagementAlgorithms` decryption option to disable accepting PBKDF2 altogether, or they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (`p2c` Header Parameter).",OSSINDEX,"","","",MEDIUM,5.300000190734863,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",jose:2.0.5,/github/workspace/functions/package-lock.json?jose,"","","","",pkg:npm/jose@2.0.5,"",CVE-2024-28176,CWE-400 Uncontrolled Resource Consumption,"jose is JavaScript module for JSON Object Signing and Encryption, providing support for JSON Web Tokens (JWT), JSON Web Signature (JWS), JSON Web Encryption (JWE), JSON Web Key (JWK), JSON Web Key Set (JWKS), and more. A vulnerability has   been identified in the JSON Web Encryption (JWE) decryption interfaces, specifically related to the support for decompressing plaintext after its decryption. Under certain conditions it is possible to have the user's environment consume unreasonable amount of CPU time or memory during JWE Decryption operations. This issue has been patched in versions 2.0.7 and 4.15.5.  Sonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2024-28176 for details",OSSINDEX,"","","",MEDIUM,5.300000190734863,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",jose:2.0.5,/github/workspace/functions/package-lock.json?jose,"","","","",pkg:npm/jose@2.0.5,"",GHSA-hhhv-q57g-882q,CWE-400 Uncontrolled Resource Consumption,"A vulnerability has been identified in the JSON Web Encryption (JWE) decryption interfaces, specifically related to the [support for decompressing plaintext after its decryption](https://www.rfc-editor.org/rfc/rfc7516.html#section-4.1.3). This allows an adversary to exploit specific scenarios where the compression ratio becomes exceptionally high. As a result, the length of the JWE token, which is determined by the compressed content's size, can land below application-defined limits. In such cases, other existing application level mechanisms for preventing resource exhaustion may be rendered ineffective.  Note that as per [RFC 8725](https://www.rfc-editor.org/rfc/rfc8725.html#name-avoid-compression-of-encryp) compression of data SHOULD NOT be done before encryption, because such compressed data often reveals information about the plaintext. For this reason the v5.x major version of `jose` removed support for compressed payloads entirely and is therefore NOT affected by this advisory.  ### Impact  Under certain conditions it is possible to have the user's environment consume unreasonable amount of CPU time or memory during JWE Decryption operations.  ### Affected users  The impact is limited only to Node.js users utilizing the JWE decryption APIs to decrypt JWEs from untrusted sources.  You are NOT affected if any of the following applies to you  - Your code uses jose version v5.x where JWE Compression is not supported anymore - Your code runs in an environment other than Node.js (e.g. Deno, CF Workers), which is the only runtime where JWE Compression is implemented out of the box - Your code does not use the JWE decryption APIs - Your code only accepts JWEs produced by trusted sources  ### Patches  `v2.0.7` and `v4.15.5` releases limit the decompression routine to only allow decompressing up to 250 kB of plaintext. In v4.x it is possible to further adjust this limit via the `inflateRaw` decryption option implementation. In v2.x it is possible to further adjust this limit via the `inflateRawSyncLimit` decryption option.  ### Workarounds  If you cannot upgrade and do not want to support compressed JWEs you may detect and reject these tokens early by checking the token's protected header  ```js const { zip } = jose.decodeProtectedHeader(token) if (zip !== undefined) {   throw new Error('JWE Compression is not supported') } ```  If you wish to continue supporting JWEs with compressed payloads in these legacy release lines you must upgrade (v1.x and v2.x to version v2.0.7, v3.x and v4.x to version v4.15.5) and review the limits put forth by the patched releases.  ### For more information If you have any questions or comments about this advisory please open a discussion in the project's [repository](https://github.com/panva/jose/discussions/new?category=q-a&title=GHSA-hhhv-q57g-882q%20advisory%20question)",NPM,"","","",MEDIUM,5.300000190734863,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",jose:2.0.5,/github/workspace/functions/package-lock.json?jose,"","","","",pkg:npm/jose@2.0.5,"",GHSA-jv3g-j58f-9mq9,"CWE-400 Uncontrolled Resource Consumption, CWE-834 Excessive Iteration","The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named `p2c` ([PBES2 Count](https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2)), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.  This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.  ### Impact  Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.  ### Affected users  The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (`alg` Header Parameter) using the `keyManagementAlgorithms` (or `algorithms` in v1.x) decryption option or through other means.  The PBKDF2-based JWE Key Management Algorithm Identifiers are  - `PBES2-HS256+A128KW` - `PBES2-HS384+A192KW` - `PBES2-HS512+A256KW`  e.g.  ```js const secret = new Uint8Array(16) const jwe = '...' // JWE from an untrusted party  await jose.compactDecrypt(jwe, secret) ```  You are NOT affected if any of the following applies to you  - Your code does not use the JWE APIs - Your code only produces JWE tokens - Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API) - Your code only accepts JWEs produced by trusted sources - Your code limits the accepted JWE Key Management Algorithms using the `keyManagementAlgorithms` decryption option not including any of the PBKDF2-based JWE key management algorithms  ### Patches  `v1.28.2`, `v2.0.6`, `v3.20.4`, and `v4.9.2` releases limit the maximum PBKDF2 iteration count to `10000` by default. It is possible to adjust this limit with a newly introduced `maxPBES2Count` decryption option.  ### Workarounds  All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to `10000` by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.  If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.  - they can use the `keyManagementAlgorithms` decryption option to disable accepting PBKDF2 altogether - they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (`p2c` Header Parameter)  ### For more information If you have any questions or comments about this advisory: * Open an discussion in the project's [repository](https://github.com/panva/jose/discussions/new?category=q-a&title=GHSA-jv3g-j58f-9mq9%20advisory%20question) * Email me at [panva.ip@gmail.com](mailto:panva.ip@gmail.com)",NPM,"","","",MEDIUM,5.300000190734863,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",json5:1.0.1,/github/workspace/package-lock.json?tsconfig-paths:3.13.0/json5:^1.0.1,JSON for humans.,MIT,"","",pkg:npm/json5@1.0.1,cpe:2.3:a:json5:json5:1.0.1:*:*:*:*:*:*:*,CVE-2022-46175,CWE-1321 Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'),"JSON5 is an extension to the popular JSON file format that aims to be easier to write and maintain by hand (e.g. for config files). The `parse` method of the JSON5 library before and including versions 1.0.1 and 2.2.1 does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object. This vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations. This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution. `JSON5.parse` should restrict parsing of `__proto__` keys when parsing JSON strings to objects. As a point of reference, the `JSON.parse` method included in JavaScript ignores `__proto__` keys. Simply changing `JSON5.parse` to `JSON.parse` in the examples above mitigates this vulnerability. This vulnerability is patched in json5 versions 1.0.2, 2.2.2, and later.",NVD,"","","",HIGH,8.8,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H/E:2.8/RC:R/MAV:A,"","","",HIGHEST,8,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",json5:1.0.1,/github/workspace/package-lock.json?tsconfig-paths:3.13.0/json5:^1.0.1,JSON for humans.,MIT,"","",pkg:npm/json5@1.0.1,cpe:2.3:a:json5:json5:1.0.1:*:*:*:*:*:*:*,GHSA-9c47-m6qq-7p4h,CWE-1321 Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'),"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.  This vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.  ## Impact This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.  ## Mitigation This vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.  ## Details   Suppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:   ```js const JSON5 = require('json5');  const doSomethingDangerous = (props) => {   if (props.isAdmin) {     console.log('Doing dangerous thing as admin.');   } else {     console.log('Doing dangerous thing as user.');   } };  const secCheckKeysSet = (obj, searchKeys) => {   let searchKeyFound = false;   Object.keys(obj).forEach((key) => {     if (searchKeys.indexOf(key) > -1) {       searchKeyFound = true;     }   });   return searchKeyFound; };  const props = JSON5.parse('{""foo"": ""bar""}'); if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {   doSomethingDangerous(props); // ""Doing dangerous thing as user."" } else {   throw new Error('Forbidden...'); } ```   If the user attempts to set the `isAdmin` key, their request will be rejected:   ```js const props = JSON5.parse('{""foo"": ""bar"", ""isAdmin"": true}'); if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {   doSomethingDangerous(props); } else {   throw new Error('Forbidden...'); // Error: Forbidden... } ```   However, users can instead set the `__proto__` key to `{""isAdmin"": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:   ```js const props = JSON5.parse('{""foo"": ""bar"", ""__proto__"": {""isAdmin"": true}}'); if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {   doSomethingDangerous(props); // ""Doing dangerous thing as admin."" } else {   throw new Error('Forbidden...'); }  ```",NPM,"","","",HIGH,7.099999904632568,CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H,"","","",HIGHEST,8,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",json5:2.2.1,/github/workspace/package-lock.json?/json5:2.2.1,JSON for humans.,MIT,"","",pkg:npm/json5@2.2.1,cpe:2.3:a:json5:json5:2.2.1:*:*:*:*:*:*:*,CVE-2022-46175,CWE-1321 Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'),"JSON5 is an extension to the popular JSON file format that aims to be easier to write and maintain by hand (e.g. for config files). The `parse` method of the JSON5 library before and including versions 1.0.1 and 2.2.1 does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object. This vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations. This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution. `JSON5.parse` should restrict parsing of `__proto__` keys when parsing JSON strings to objects. As a point of reference, the `JSON.parse` method included in JavaScript ignores `__proto__` keys. Simply changing `JSON5.parse` to `JSON.parse` in the examples above mitigates this vulnerability. This vulnerability is patched in json5 versions 1.0.2, 2.2.2, and later.",NVD,"","","",HIGH,8.8,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H/E:2.8/RC:R/MAV:A,"","","",HIGHEST,8,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",jsonwebtoken:8.5.1,/github/workspace/functions/package-lock.json?jsonwebtoken,"","","","",pkg:npm/jsonwebtoken@8.5.1,"",CVE-2022-23539,CWE-327 Use of a Broken or Risky Cryptographic Algorithm,"Versions `<=8.5.1` of `jsonwebtoken` library could be misconfigured so that legacy, insecure key types are used for signature verification. For example, DSA keys could be used with the RS256 algorithm. You are affected if you are using an algorithm and a key type other than a combination listed in the GitHub Security Advisory as unaffected. This issue has been fixed, please update to version 9.0.0. This version validates for asymmetric key type and algorithm combinations. Please refer to the above mentioned algorithm / key type combinations for the valid secure configuration. After updating to version 9.0.0, if you still intend to continue with signing or verifying tokens using invalid key type/algorithm value combinations, you’ll need to set the `allowInvalidAsymmetricKeyTypes` option  to `true` in the `sign()` and/or `verify()` functions.",OSSINDEX,"","","",HIGH,8.100000381469727,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",jsonwebtoken:8.5.1,/github/workspace/functions/package-lock.json?jsonwebtoken,"","","","",pkg:npm/jsonwebtoken@8.5.1,"",GHSA-8cf7-32gw-wr33,CWE-327 Use of a Broken or Risky Cryptographic Algorithm,"# Overview  Versions `<=8.5.1` of `jsonwebtoken` library could be misconfigured so that legacy, insecure key types are used for signature verification. For example, DSA keys could be used with the RS256 algorithm.   # Am I affected?  You are affected if you are using an algorithm and a key type other than the combinations mentioned below  | Key type |  algorithm                                    | |----------|------------------------------------------| | ec           | ES256, ES384, ES512                      | | rsa          | RS256, RS384, RS512, PS256, PS384, PS512 | | rsa-pss  | PS256, PS384, PS512                      |  And for Elliptic Curve algorithms:  | `alg` | Curve      | |-------|------------| | ES256 | prime256v1 | | ES384 | secp384r1  | | ES512 | secp521r1  |  # How do I fix it?  Update to version 9.0.0. This version validates for asymmetric key type and algorithm combinations. Please refer to the above mentioned algorithm / key type combinations for the valid secure configuration. After updating to version 9.0.0, If you still intend to continue with signing or verifying tokens using invalid key type/algorithm value combinations, you’ll need to set the `allowInvalidAsymmetricKeyTypes` option to `true` in the `sign()` and/or `verify()` functions.  # Will the fix impact my users?  There will be no impact, if you update to version 9.0.0 and you already use a valid secure combination of key type and algorithm. Otherwise,  use the  `allowInvalidAsymmetricKeyTypes` option  to `true` in the `sign()` and `verify()` functions to continue usage of invalid key type/algorithm combination in 9.0.0 for legacy compatibility.",NPM,"","","",HIGH,8.100000381469727,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",jsonwebtoken:8.5.1,/github/workspace/functions/package-lock.json?jsonwebtoken,"","","","",pkg:npm/jsonwebtoken@8.5.1,"",CVE-2022-23540,CWE-287 Improper Authentication,"In versions `<=8.5.1` of `jsonwebtoken` library, lack of algorithm definition in the `jwt.verify()` function can lead to signature validation bypass due to defaulting to the `none` algorithm for signature verification. Users are affected if you do not specify algorithms in the `jwt.verify()` function. This issue has been fixed, please update to version 9.0.0 which removes the default support for the none algorithm in the `jwt.verify()` method. There will be no impact, if you update to version 9.0.0 and you don’t need to allow for the `none` algorithm. If you need 'none' algorithm, you have to explicitly specify that in `jwt.verify()` options.",OSSINDEX,"","","",HIGH,7.599999904632568,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:H/A:L,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",jsonwebtoken:8.5.1,/github/workspace/functions/package-lock.json?jsonwebtoken,"","","","",pkg:npm/jsonwebtoken@8.5.1,"",GHSA-qwph-4952-7xr6,"CWE-347 Improper Verification of Cryptographic Signature, CWE-327 Use of a Broken or Risky Cryptographic Algorithm, CWE-287 Improper Authentication","# Overview  In versions <=8.5.1 of jsonwebtoken library, lack of algorithm definition and a falsy secret or key in the `jwt.verify()` function can lead to signature validation bypass due to defaulting to the `none` algorithm for signature verification.  # Am I affected? You will be affected if all the following are true in the `jwt.verify()` function: - a token with no signature is received - no algorithms are specified  - a falsy (e.g. null, false, undefined) secret or key is passed   # How do I fix it?   Update to version 9.0.0 which removes the default support for the none algorithm in the `jwt.verify()` method.   # Will the fix impact my users?  There will be no impact, if you update to version 9.0.0 and you don’t need to allow for the `none` algorithm. If you need 'none' algorithm, you have to explicitly specify that in `jwt.verify()` options.",NPM,"","","",MEDIUM,6.400000095367432,CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:H/A:L,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",jsonwebtoken:8.5.1,/github/workspace/functions/package-lock.json?jsonwebtoken,"","","","",pkg:npm/jsonwebtoken@8.5.1,"",CVE-2022-23541,CWE-1259 Improper Restriction of Security Token Assignment,"jsonwebtoken is an implementation of JSON Web Tokens. Versions `<= 8.5.1` of `jsonwebtoken` library can be misconfigured so that passing a poorly implemented key retrieval function referring to the `secretOrPublicKey` argument from the readme link will result in incorrect verification of tokens. There is a possibility of using a different algorithm and key combination in verification, other than the one that was used to sign the tokens. Specifically, tokens signed with an asymmetric public key could be verified with a symmetric HS256 algorithm. This can lead to successful validation of  forged tokens. If your application is supporting usage of both symmetric key and asymmetric key in jwt.verify() implementation with the same key retrieval function. This issue has been patched, please update to version 9.0.0.  Sonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2022-23541 for details",OSSINDEX,"","","",MEDIUM,6.300000190734863,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",jsonwebtoken:8.5.1,/github/workspace/functions/package-lock.json?jsonwebtoken,"","","","",pkg:npm/jsonwebtoken@8.5.1,"",GHSA-hjrf-2m68-5959,"CWE-287 Improper Authentication, CWE-1259 Improper Restriction of Security Token Assignment","# Overview  Versions `<=8.5.1` of `jsonwebtoken` library can be misconfigured so that passing a poorly implemented key retrieval function (referring to the `secretOrPublicKey` argument from the [readme link](https://github.com/auth0/node-jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback)) will result in incorrect verification of tokens. There is a possibility of using a different algorithm and key combination in verification  than the one that was used to sign the tokens. Specifically, tokens signed with an asymmetric public key could be verified with a symmetric HS256 algorithm. This can lead to successful validation of forged tokens.   # Am I affected?  You will be affected if your application is supporting usage of both symmetric key and asymmetric key in jwt.verify() implementation with the same key retrieval function.   # How do I fix it?   Update to version 9.0.0.  # Will the fix impact my users?  There is no impact for end users",NPM,"","","",MEDIUM,5.0,CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",micromatch:4.0.4,/github/workspace/package-lock.json?/micromatch:4.0.4,Glob matching for javascript/node.js. A replacement and faster alternative to minimatch and multimatch.,MIT,"","",pkg:npm/micromatch@4.0.4,"",CVE-2024-4067,CWE-1333 Inefficient Regular Expression Complexity,"The NPM package `micromatch` prior to 4.0.8 is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in `micromatch.braces()` in `index.js` because the pattern `.*` will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn't find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persists. This issue should be mitigated by using a safe pattern that won't start backtracking the regular expression due to greedy matching. This issue was fixed in version 4.0.8.",OSSINDEX,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,8,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",micromatch:4.0.4,/github/workspace/package-lock.json?/micromatch:4.0.4,Glob matching for javascript/node.js. A replacement and faster alternative to minimatch and multimatch.,MIT,"","",pkg:npm/micromatch@4.0.4,"",GHSA-952p-6rrq-rcjv,CWE-1333 Inefficient Regular Expression Complexity,"The NPM package `micromatch` prior to version 4.0.8 is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in `micromatch.braces()` in `index.js` because the pattern `.*` will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn't find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persisted prior to https://github.com/micromatch/micromatch/pull/266. This issue should be mitigated by using a safe pattern that won't start backtracking the regular expression due to greedy matching.",NPM,"","","",MEDIUM,5.300000190734863,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L,"","","",HIGHEST,8,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",minimist:1.2.5,/github/workspace/functions/package-lock.json?minimist,"","","","",pkg:npm/minimist@1.2.5,"",CVE-2021-44906,CWE-1321 Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'),"Minimist <=1.2.5 is vulnerable to Prototype Pollution via file index.js, function setKey() (lines 69-95).",OSSINDEX,"","","",CRITICAL,9.800000190734863,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",minimist:1.2.5,/github/workspace/functions/package-lock.json?minimist,"","","","",pkg:npm/minimist@1.2.5,"",GHSA-xvch-5gv4-984h,CWE-1321 Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'),"Minimist prior to 1.2.6 and 0.2.4 is vulnerable to Prototype Pollution via file `index.js`, function `setKey()` (lines 69-95).",NPM,"","","",CRITICAL,9.800000190734863,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",nanoid:3.3.1,/github/workspace/package-lock.json?postcss:8.4.5/nanoid:^3.1.30,"A tiny (130 bytes), secure URL-friendly unique string ID generator",MIT,"","",pkg:npm/nanoid@3.3.1,cpe:2.3:a:nanoid_project:nanoid:3.3.1:*:*:*:*:*:*:*,CVE-2024-55565,CWE-835 Loop with Unreachable Exit Condition ('Infinite Loop'),nanoid (aka Nano ID) before 5.0.9 mishandles non-integer values. 3.3.8 is also a fixed version.,OSSINDEX,MEDIUM,6.900000095367432,CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:L/VA:L/SC:N/SI:N/SA:N,"","","","","","",HIGHEST,6,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",nanoid:3.3.1,/github/workspace/package-lock.json?postcss:8.4.5/nanoid:^3.1.30,"A tiny (130 bytes), secure URL-friendly unique string ID generator",MIT,"","",pkg:npm/nanoid@3.3.1,cpe:2.3:a:nanoid_project:nanoid:3.3.1:*:*:*:*:*:*:*,GHSA-mwcw-c2x4-8c55,CWE-835 Loop with Unreachable Exit Condition ('Infinite Loop'),"When nanoid is called with a fractional value, there were a number of undesirable effects:  1. in browser and non-secure, the code infinite loops on while (size--) 2. in node, the value of poolOffset becomes fractional, causing calls to nanoid to return zeroes until the pool is next filled 3. if the first call in node is a fractional argument, the initial buffer allocation fails with an error  Version 3.3.8 and 5.0.9 are fixed.",NPM,"","","",MEDIUM,4.300000190734863,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N,"","","",HIGHEST,6,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",next:12.1.0,/github/workspace/package-lock.json?/next:12.1.0,The React Framework,MIT,"","",pkg:npm/next@12.1.0,cpe:2.3:a:next:next:12.1.0:*:*:*:*:*:*:*,GHSA-f82v-jwr5-mffw,CWE-285 Improper Authorization,"# Impact It is possible to bypass authorization checks within a Next.js application, if the authorization check occurs in middleware.  # Patches * For Next.js 15.x, this issue is fixed in `15.2.3` * For Next.js 14.x, this issue is fixed in `14.2.25` * For Next.js 13.x, this issue is fixed in `13.5.9` * For Next.js 12.x, this issue is fixed in `12.3.5` * For Next.js 11.x, consult the below workaround.  _Note: Next.js deployments hosted on Vercel are automatically protected against this vulnerability._  # Workaround If patching to a safe version is infeasible, it is recommend that you prevent external user requests which contain the `x-middleware-subrequest` header from reaching your Next.js application.  ## Credits  - Allam Rachid (zhero;) - Allam Yasser (inzo_)",NPM,"","","",CRITICAL,9.100000381469727,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N,"","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",next:12.1.0,/github/workspace/package-lock.json?/next:12.1.0,The React Framework,MIT,"","",pkg:npm/next@12.1.0,cpe:2.3:a:next:next:12.1.0:*:*:*:*:*:*:*,CVE-2025-29927,CWE-285 Improper Authorization,"Next.js is a React framework for building full-stack web applications. Starting in version 1.11.4 and prior to versions 12.3.5, 13.5.9, 14.2.25, and 15.2.3, it is possible to bypass authorization checks within a Next.js application, if the authorization check occurs in middleware. If patching to a safe version is infeasible, it is recommend that you prevent external user requests which contain the x-middleware-subrequest header from reaching your Next.js application. This vulnerability is fixed in 12.3.5, 13.5.9, 14.2.25, and 15.2.3.  Sonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2025-29927 for details",OSSINDEX,HIGH,9.300000190734863,CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:H/VI:H/VA:N/SC:N/SI:N/SA:N,"","","","","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",next:12.1.0,/github/workspace/package-lock.json?/next:12.1.0,The React Framework,MIT,"","",pkg:npm/next@12.1.0,cpe:2.3:a:next:next:12.1.0:*:*:*:*:*:*:*,CVE-2024-46982,CWE-639 Authorization Bypass Through User-Controlled Key,"Next.js is a React framework for building full-stack web applications. By sending a crafted HTTP request, it is possible to poison the cache of a non-dynamic server-side rendered route in the pages router (this does not affect the app router). When this crafted request is sent it could coerce Next.js to cache a route that is meant to not be cached and send a `Cache-Control: s-maxage=1, stale-while-revalidate` header which some upstream CDNs may cache as well. To be potentially affected all of the following must apply: 1. Next.js between 13.5.1 and 14.2.9, 2. Using pages router, & 3. Using non-dynamic server-side rendered routes e.g. `pages/dashboard.tsx` not `pages/blog/[slug].tsx`. This vulnerability was resolved in Next.js v13.5.7, v14.2.10, and later. We recommend upgrading regardless of whether you can reproduce the issue or not. There are no official or recommended workarounds for this issue, we recommend that users patch to a safe version.  Sonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2024-46982 for details",OSSINDEX,HIGH,8.699999809265137,CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N,"","","","","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",next:12.1.0,/github/workspace/package-lock.json?/next:12.1.0,The React Framework,MIT,"","",pkg:npm/next@12.1.0,cpe:2.3:a:next:next:12.1.0:*:*:*:*:*:*:*,CVE-2024-51479,CWE-285 Improper Authorization,"Next.js is a React framework for building full-stack web applications. In affected versions if a Next.js application is performing authorization in middleware based on pathname, it was possible for this authorization to be bypassed for pages directly under the application's root directory. For example: * [Not affected] `https://example.com/` * [Affected] `https://example.com/foo` * [Not affected] `https://example.com/foo/bar`. This issue is patched in Next.js `14.2.15` and later. If your Next.js application is hosted on Vercel, this vulnerability has been automatically mitigated, regardless of Next.js version. There are no official workarounds for this vulnerability.  Sonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2024-51479 for details",OSSINDEX,HIGH,8.199999809265137,CVSS:4.0/AV:N/AC:L/AT:P/PR:N/UI:N/VC:H/VI:N/VA:N/SC:N/SI:N/SA:N,"","","","","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",next:12.1.0,/github/workspace/package-lock.json?/next:12.1.0,The React Framework,MIT,"","",pkg:npm/next@12.1.0,cpe:2.3:a:next:next:12.1.0:*:*:*:*:*:*:*,CVE-2024-47831,CWE-674 Uncontrolled Recursion,"Next.js is a React Framework for the Web. Cersions on the 10.x, 11.x, 12.x, 13.x, and 14.x branches before version 14.2.7 contain a vulnerability in the image optimization feature which allows for a potential Denial of Service (DoS) condition which could lead to excessive CPU consumption. Neither the `next.config.js` file that is configured with `images.unoptimized` set to `true` or `images.loader` set to a non-default value nor the Next.js application that is hosted on Vercel are affected. This issue was fully patched in Next.js `14.2.7`. As a workaround, ensure that the `next.config.js` file has either `images.unoptimized`, `images.loader` or `images.loaderFile` assigned.  Sonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2024-47831 for details",OSSINDEX,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",next:12.1.0,/github/workspace/package-lock.json?/next:12.1.0,The React Framework,MIT,"","",pkg:npm/next@12.1.0,cpe:2.3:a:next:next:12.1.0:*:*:*:*:*:*:*,GHSA-7gfc-8cq8-jh5f,CWE-285 Improper Authorization,"### Impact If a Next.js application is performing authorization in middleware based on pathname, it was possible for this authorization to be bypassed.  ### Patches This issue was patched in Next.js `14.2.15` and later.  If your Next.js application is hosted on Vercel, this vulnerability has been automatically mitigated, regardless of Next.js version.  ### Workarounds There are no official workarounds for this vulnerability.  #### Credits We'd like to thank [tyage](http://github.com/tyage) (GMO CyberSecurity by IERAE) for responsible disclosure of this issue.",NPM,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,"","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",next:12.1.0,/github/workspace/package-lock.json?/next:12.1.0,The React Framework,MIT,"","",pkg:npm/next@12.1.0,cpe:2.3:a:next:next:12.1.0:*:*:*:*:*:*:*,GHSA-g77x-44xx-532m,CWE-674 Uncontrolled Recursion,"### Impact The image optimization feature of Next.js contained a vulnerability which allowed for a potential Denial of Service (DoS) condition which could lead to excessive CPU consumption.  **Not affected:** - The `next.config.js` file is configured with `images.unoptimized` set to `true` or `images.loader` set to a non-default value. - The Next.js application is hosted on Vercel.   ### Patches This issue was fully patched in Next.js `14.2.7`. We recommend that users upgrade to at least this version.  ### Workarounds Ensure that the `next.config.js` file has either `images.unoptimized`, `images.loader` or `images.loaderFile` assigned.  #### Credits Brandon Dahler (brandondahler), AWS Dimitrios Vlastaras",NPM,"","","",MEDIUM,5.900000095367432,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",next:12.1.0,/github/workspace/package-lock.json?/next:12.1.0,The React Framework,MIT,"","",pkg:npm/next@12.1.0,cpe:2.3:a:next:next:12.1.0:*:*:*:*:*:*:*,CVE-2024-56332,CWE-770 Allocation of Resources Without Limits or Throttling,"Next.js is a React framework for building full-stack web applications. Starting in version 13.0.0 and prior to versions 13.5.8, 14.2.21, and 15.1.2, Next.js is vulnerable to a Denial of Service (DoS) attack that allows attackers to construct requests that leaves requests to Server Actions hanging until the hosting provider cancels the function execution. This vulnerability can also be used as a Denial of Wallet (DoW) attack when deployed in providers billing by response times. (Note: Next.js server is idle during that time and only keeps the connection open. CPU and memory footprint are low during that time.). Deployments without any protection against long running Server Action invocations are especially vulnerable. Hosting providers like Vercel or Netlify set a default maximum duration on function execution to reduce the risk of excessive billing. This is the same issue as if the incoming HTTP request has an invalid `Content-Length` header or never closes. If the host has no other mitigations to those then this vulnerability is novel. This vulnerability affects only Next.js deployments using Server Actions. The issue was resolved in Next.js 13.5.8, 14.2.21, and 15.1.2. We recommend that users upgrade to a safe version. There are no official workarounds.",OSSINDEX,"","","",MEDIUM,5.300000190734863,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L,"","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",next:12.1.0,/github/workspace/package-lock.json?/next:12.1.0,The React Framework,MIT,"","",pkg:npm/next@12.1.0,cpe:2.3:a:next:next:12.1.0:*:*:*:*:*:*:*,GHSA-qpjv-v59x-3qc4,CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'),"**Summary**   We received a responsible disclosure from Allam Rachid (zhero) for a low-severity race-condition vulnerability in Next.js. This issue only affects the **Pages Router** under certain misconfigurations, causing normal endpoints to serve `pageProps` data instead of standard HTML.  [Learn more here](https://vercel.com/changelog/cve-2025-32421)  **Credit**   Thank you to **Allam Rachid (zhero)** for the responsible disclosure. This research was rewarded as part of our bug bounty program.",NPM,"","","",LOW,3.700000047683716,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N,"","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",next:12.1.0,/github/workspace/package-lock.json?/next:12.1.0,The React Framework,MIT,"","",pkg:npm/next@12.1.0,cpe:2.3:a:next:next:12.1.0:*:*:*:*:*:*:*,CVE-2025-48068,CWE-1385 Missing Origin Validation in WebSockets,"Next.js is a React framework for building full-stack web applications. In versions starting from 13.0 to before 14.2.30 and 15.0.0 to before 15.2.2, Next.js may have allowed limited source code exposure when the dev server was running with the App Router enabled. The vulnerability only affects local development environments and requires the user to visit a malicious webpage while npm run dev is active. This issue has been patched in versions 14.2.30 and 15.2.2.  Sonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2025-48068 for details",OSSINDEX,LOW,2.299999952316284,CVSS:4.0/AV:N/AC:L/AT:P/PR:N/UI:P/VC:L/VI:N/VA:N/SC:L/SI:N/SA:N,"","","","","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",next:12.1.0,/github/workspace/package-lock.json?/next:12.1.0,The React Framework,MIT,"","",pkg:npm/next@12.1.0,cpe:2.3:a:next:next:12.1.0:*:*:*:*:*:*:*,GHSA-c59h-r6p8-q9wc,"","Next.js before 13.4.20-canary.13 lacks a cache-control header and thus empty prefetch responses may sometimes be cached by a CDN, causing a denial of service to all users requesting the same URL via that CDN. Cloudflare considers these requests cacheable assets.",NPM,"","","","","","","","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",node-forge:1.2.1,/github/workspace/functions/package-lock.json?node-forge,"","","","",pkg:npm/node-forge@1.2.1,"",CVE-2022-24771,CWE-347 Improper Verification of Cryptographic Signature,"Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.",OSSINDEX,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",node-forge:1.2.1,/github/workspace/functions/package-lock.json?node-forge,"","","","",pkg:npm/node-forge@1.2.1,"",CVE-2022-24772,CWE-347 Improper Verification of Cryptographic Signature,"Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.",OSSINDEX,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",node-forge:1.2.1,/github/workspace/functions/package-lock.json?node-forge,"","","","",pkg:npm/node-forge@1.2.1,"",GHSA-cfm4-qjh2-4765,CWE-347 Improper Verification of Cryptographic Signature,"### Impact  RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used.  ### Patches  The issue has been addressed in `node-forge` `1.3.0`.  ### References  For more information, please see [""Bleichenbacher's RSA signature forgery based on implementation error""](https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/) by Hal Finney.  ### For more information  If you have any questions or comments about this advisory: * Open an issue in [forge](https://github.com/digitalbazaar/forge) * Email us at [example email address](mailto:security@digitalbazaar.com)",NPM,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",node-forge:1.2.1,/github/workspace/functions/package-lock.json?node-forge,"","","","",pkg:npm/node-forge@1.2.1,"",GHSA-x4jg-mjrx-434g,CWE-347 Improper Verification of Cryptographic Signature,"### Impact  RSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used.  ### Patches  The issue has been addressed in `node-forge` `1.3.0`.  ### References  For more information, please see [""Bleichenbacher's RSA signature forgery based on implementation error""](https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/) by Hal Finney.  ### For more information  If you have any questions or comments about this advisory: * Open an issue in [forge](https://github.com/digitalbazaar/forge) * Email us at [example email address](mailto:security@digitalbazaar.com)",NPM,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",node-forge:1.2.1,/github/workspace/functions/package-lock.json?node-forge,"","","","",pkg:npm/node-forge@1.2.1,"",CVE-2022-24773,CWE-347 Improper Verification of Cryptographic Signature,"Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not properly check `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.",OSSINDEX,"","","",MEDIUM,5.300000190734863,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",node-forge:1.2.1,/github/workspace/functions/package-lock.json?node-forge,"","","","",pkg:npm/node-forge@1.2.1,"",GHSA-2r2c-g63r-vccr,CWE-347 Improper Verification of Cryptographic Signature,### Impact  RSA PKCS#1 v1.5 signature verification code is not properly checking `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest.  ### Patches  The issue has been addressed in `node-forge` `1.3.0`.  ### For more information  If you have any questions or comments about this advisory: * Open an issue in [forge](https://github.com/digitalbazaar/forge) * Email us at [example email address](mailto:security@digitalbazaar.com),NPM,"","","",MEDIUM,5.300000190734863,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",packages-bundle.js,/github/workspace/node_modules/next/dist/compiled/babel-packages/packages-bundle.js,"","",1ff9884931f648e75672129eade884c3,5960de10181c3137e35fdabfeec366310aa9771a,pkg:javascript/lodash@4.17.20,"",CVE-2021-23337,CWE-94 Improper Control of Generation of Code ('Code Injection'),Lodash versions prior to 4.17.21 are vulnerable to Command Injection via the template function.,NVD,MEDIUM,6.5,/AV:N/AC:L/Au:S/C:P/I:P/A:P,HIGH,7.2,CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:1.2/RC:R/MAV:A,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",packages-bundle.js,/github/workspace/node_modules/next/dist/compiled/babel-packages/packages-bundle.js,"","",1ff9884931f648e75672129eade884c3,5960de10181c3137e35fdabfeec366310aa9771a,pkg:javascript/lodash@4.17.20,"",CVE-2020-28500,NVD-CWE-Other,"Lodash versions prior to 4.17.21 are vulnerable to Regular Expression Denial of Service (ReDoS) via the toNumber, trim and trimEnd functions.",NVD,MEDIUM,5.0,/AV:N/AC:L/Au:N/C:N/I:N/A:P,MEDIUM,5.3,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:3.9/RC:R/MAV:A,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",path-to-regexp:0.1.7,/github/workspace/package-lock.json?/path-to-regexp:0.1.7,Express style path to RegExp utility,MIT,"","",pkg:npm/path-to-regexp@0.1.7,"",CVE-2024-45296,CWE-1333 Inefficient Regular Expression Complexity,"path-to-regexp turns path strings into a regular expressions. In certain cases, path-to-regexp will output a regular expression that can be exploited to cause poor performance. Because JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and lead to a DoS. The bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (.). For users of 0.1, upgrade to 0.1.10. All other users should upgrade to 8.0.0.",OSSINDEX,HIGH,8.699999809265137,CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N,"","","","","","",HIGHEST,5,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",path-to-regexp:0.1.7,/github/workspace/package-lock.json?/path-to-regexp:0.1.7,Express style path to RegExp utility,MIT,"","",pkg:npm/path-to-regexp@0.1.7,"",GHSA-9wv6-86v2-598j,CWE-1333 Inefficient Regular Expression Complexity,"### Impact  A bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (`.`). For example, `/:a-:b`.  ### Patches  For users of 0.1, upgrade to `0.1.10`. All other users should upgrade to `8.0.0`.  These versions add backtrack protection when a custom regex pattern is not provided:  - [0.1.10](https://github.com/pillarjs/path-to-regexp/releases/tag/v0.1.10) - [1.9.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v1.9.0) - [3.3.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v3.3.0) - [6.3.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0)  They do not protect against vulnerable user supplied capture groups. Protecting against explicit user patterns is out of scope for old versions and not considered a vulnerability.  Version [7.1.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v7.1.0) can enable `strict: true` and get an error when the regular expression might be bad.  Version [8.0.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v8.0.0) removes the features that can cause a ReDoS.  ### Workarounds  All versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change `/:a-:b` to `/:a-:b([^-/]+)`.  If paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.  ### Details  Using `/:a-:b` will produce the regular expression `/^\/([^\/]+?)-([^\/]+?)\/?$/`. This can be exploited by a path such as `/a${'-a'.repeat(8_000)}/a`. [OWASP](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS) has a good example of why this occurs, but the TL;DR is the `/a` at the end ensures this route would never match but due to naive backtracking it will still attempt every combination of the `:a-:b` on the repeated 8,000 `-a`.  Because JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and can lead to a DoS. In local benchmarks, exploiting the unsafe regex will result in performance that is over 1000x worse than the safe regex. In a more realistic environment using Express v4 and 10 concurrent connections, this translated to average latency of ~600ms vs 1ms.  ### References  * [OWASP](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS) * [Detailed blog post](https://blakeembrey.com/posts/2024-09-web-redos/)",NPM,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,5,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",path-to-regexp:0.1.7,/github/workspace/package-lock.json?/path-to-regexp:0.1.7,Express style path to RegExp utility,MIT,"","",pkg:npm/path-to-regexp@0.1.7,"",GHSA-rhx6-c78j-4q9w,CWE-1333 Inefficient Regular Expression Complexity,"### Impact  The regular expression that is vulnerable to backtracking can be generated in versions before 0.1.12 of `path-to-regexp`, originally reported in CVE-2024-45296  ### Patches  Upgrade to 0.1.12.  ### Workarounds  Avoid using two parameters within a single path segment, when the separator is not `.` (e.g. no `/:a-:b`). Alternatively, you can define the regex used for both parameters and ensure they do not overlap to allow backtracking.  ### References  - https://github.com/advisories/GHSA-9wv6-86v2-598j - https://blakeembrey.com/posts/2024-09-web-redos/",NPM,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,5,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",postcss:8.4.5,/github/workspace/package-lock.json?/postcss:8.4.5,Tool for transforming styles with JS plugins,MIT,"","",pkg:npm/postcss@8.4.5,cpe:2.3:a:postcss:postcss:8.4.5:*:*:*:*:*:*:*,GHSA-7fh5-64p2-3v2j,"CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'), CWE-144 Improper Neutralization of Line Delimiters","An issue was discovered in PostCSS before 8.4.31. It affects linters using PostCSS to parse external Cascading Style Sheets (CSS). There may be `\r` discrepancies, as demonstrated by `@font-face{ font:(\r/*);}` in a rule.  This vulnerability affects linters using PostCSS to parse external untrusted CSS. An attacker can prepare CSS in such a way that it will contains parts parsed by PostCSS as a CSS comment. After processing by PostCSS, it will be included in the PostCSS output in CSS nodes (rules, properties) despite being originally included in a comment.",NPM,"","","",MEDIUM,5.300000190734863,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N,"","","",HIGHEST,8,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",postcss:8.4.5,/github/workspace/package-lock.json?/postcss:8.4.5,Tool for transforming styles with JS plugins,MIT,"","",pkg:npm/postcss@8.4.5,cpe:2.3:a:postcss:postcss:8.4.5:*:*:*:*:*:*:*,CVE-2023-44270,CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'),"An issue was discovered in PostCSS before 8.4.31. The vulnerability affects linters using PostCSS to parse external untrusted CSS. An attacker can prepare CSS in such a way that it will contains parts parsed by PostCSS as a CSS comment. After processing by PostCSS, it will be included in the PostCSS output in CSS nodes (rules, properties) despite being included in a comment.",NVD,"","","",MEDIUM,5.3,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:3.9/RC:R/MAV:A,"","","",HIGHEST,8,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",protobufjs:6.11.2,/github/workspace/functions/package-lock.json?protobufjs,"","","","",pkg:npm/protobufjs@6.11.2,"",GHSA-h755-8qp9-cq85,CWE-1321 Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'),"protobuf.js (aka protobufjs) 6.10.0 until 6.11.4 and 7.0.0 until 7.2.4 allows Prototype Pollution, a different vulnerability than CVE-2022-25878. A user-controlled protobuf message can be used by an attacker to pollute the prototype of Object.prototype by adding and overwriting its data and functions. Exploitation can involve: (1) using the function parse to parse protobuf messages on the fly, (2) loading .proto files by using load/loadSync functions, or (3) providing untrusted input to the functions ReflectionObject.setParsedOption and util.setProperty. NOTE: this CVE Record is about `Object.constructor.prototype.<new-property> = ...;` whereas CVE-2022-25878 was about `Object.__proto__.<new-property> = ...;` instead.",NPM,"","","",CRITICAL,9.800000190734863,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",protobufjs:6.11.2,/github/workspace/functions/package-lock.json?protobufjs,"","","","",pkg:npm/protobufjs@6.11.2,"",CVE-2022-25878,CWE-1321 Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'),The package protobufjs before 6.11.3 are vulnerable to Prototype Pollution which can allow an attacker to add/modify properties of the Object.prototype. This vulnerability can occur in multiple ways: 1. by providing untrusted user input to util.setProperty or to ReflectionObject.setParsedOption functions 2. by parsing/loading .proto files  Sonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2022-25878 for details,OSSINDEX,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",protobufjs:6.11.2,/github/workspace/functions/package-lock.json?protobufjs,"","","","",pkg:npm/protobufjs@6.11.2,"",GHSA-g954-5hwp-pp24,CWE-1321 Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'),"The package protobufjs is vulnerable to Prototype Pollution, which can allow an attacker to add/modify properties of the Object.prototype. Versions after and including 6.10.0 until 6.10.3 and after and including 6.11.0 until 6.11.3 are vulnerable.  This vulnerability can occur in multiple ways: 1. by providing untrusted user input to util.setProperty or to ReflectionObject.setParsedOption functions 2. by parsing/loading .proto files",NPM,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",semver:5.7.1,/github/workspace/functions/package-lock.json?semver,"","","","",pkg:npm/semver@5.7.1,"",CVE-2022-25883,CWE-1333 Inefficient Regular Expression Complexity,"Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.  Sonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2022-25883 for details",OSSINDEX,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",semver:5.7.1,/github/workspace/functions/package-lock.json?semver,"","","","",pkg:npm/semver@5.7.1,"",GHSA-c2qf-rxjj-qqgw,CWE-1333 Inefficient Regular Expression Complexity,"Versions of the package semver before 7.5.2 on the 7.x branch, before 6.3.1 on the 6.x branch, and all other versions before 5.7.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.",NPM,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",semver:6.3.0,/github/workspace/package-lock.json?/semver:6.3.0,The semantic version parser used by npm.,ISC,"","",pkg:npm/semver@6.3.0,"",CVE-2022-25883,CWE-1333 Inefficient Regular Expression Complexity,"Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.  Sonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2022-25883 for details",OSSINDEX,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,5,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",semver:6.3.0,/github/workspace/package-lock.json?/semver:6.3.0,The semantic version parser used by npm.,ISC,"","",pkg:npm/semver@6.3.0,"",GHSA-c2qf-rxjj-qqgw,CWE-1333 Inefficient Regular Expression Complexity,"Versions of the package semver before 7.5.2 on the 7.x branch, before 6.3.1 on the 6.x branch, and all other versions before 5.7.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.",NPM,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,5,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",semver:7.3.5,/github/workspace/functions/package-lock.json?semver,"","","","",pkg:npm/semver@7.3.5,"",CVE-2022-25883,CWE-1333 Inefficient Regular Expression Complexity,"Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.  Sonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2022-25883 for details",OSSINDEX,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",semver:7.3.5,/github/workspace/functions/package-lock.json?semver,"","","","",pkg:npm/semver@7.3.5,"",GHSA-c2qf-rxjj-qqgw,CWE-1333 Inefficient Regular Expression Complexity,"Versions of the package semver before 7.5.2 on the 7.x branch, before 6.3.1 on the 6.x branch, and all other versions before 5.7.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.",NPM,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",send:0.17.2,/github/workspace/package-lock.json?serve-static:1.14.2/send:0.17.2,Better streaming static file server with Range and conditional-GET support,MIT,"","",pkg:npm/send@0.17.2,cpe:2.3:a:send_project:send:0.17.2:*:*:*:*:*:*:*,GHSA-m6fv-jmcg-4jfg,CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),"### Impact  passing untrusted user input - even after sanitizing it - to `SendStream.redirect()` may execute untrusted code  ### Patches  this issue is patched in send 0.19.0  ### Workarounds  users are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist  ### Details  successful exploitation of this vector requires the following:  1. The attacker MUST control the input to response.redirect() 1. express MUST NOT redirect before the template appears 1. the browser MUST NOT complete redirection before: 1. the user MUST click on the link in the template",NPM,"","","",MEDIUM,5.0,CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L,"","","",HIGHEST,6,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",send:0.17.2,/github/workspace/package-lock.json?serve-static:1.14.2/send:0.17.2,Better streaming static file server with Range and conditional-GET support,MIT,"","",pkg:npm/send@0.17.2,cpe:2.3:a:send_project:send:0.17.2:*:*:*:*:*:*:*,CVE-2024-43799,CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Send is a library for streaming files from the file system as a http response. Send passes untrusted user input to SendStream.redirect() which executes untrusted code. This issue is patched in send 0.19.0.,NVD,"","","",MEDIUM,4.7,CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:L/A:N/E:1.6/RC:R/MAV:A,"","","",HIGHEST,6,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",serve-static:1.14.2,/github/workspace/package-lock.json?/serve-static:1.14.2,Serve static files,MIT,"","",pkg:npm/serve-static@1.14.2,cpe:2.3:a:serve-static_project:serve-static:1.14.2:*:*:*:*:*:*:*,GHSA-cm22-4g7w-348p,CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),"### Impact  passing untrusted user input - even after sanitizing it - to `redirect()` may execute untrusted code  ### Patches  this issue is patched in serve-static 1.16.0  ### Workarounds  users are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist  ### Details  successful exploitation of this vector requires the following:  1. The attacker MUST control the input to response.redirect() 1. express MUST NOT redirect before the template appears 1. the browser MUST NOT complete redirection before: 1. the user MUST click on the link in the template",NPM,"","","",MEDIUM,5.0,CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L,"","","",HIGHEST,6,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",serve-static:1.14.2,/github/workspace/package-lock.json?/serve-static:1.14.2,Serve static files,MIT,"","",pkg:npm/serve-static@1.14.2,cpe:2.3:a:serve-static_project:serve-static:1.14.2:*:*:*:*:*:*:*,CVE-2024-43800,CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),serve-static serves static files. serve-static passes untrusted user input - even after sanitizing it - to redirect() may execute untrusted code. This issue is patched in serve-static 1.16.0.  Sonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2024-43800 for details,OSSINDEX,"","","",MEDIUM,4.699999809265137,CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:L/A:N,"","","",HIGHEST,6,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",ua-parser.js,/github/workspace/node_modules/next/dist/compiled/ua-parser-js/ua-parser.js,"","",fb6d71ff07150b9445c7b16e628fd580,cf3d524be8e03a90c4299b8aea84091e4e268ee3,pkg:javascript/ua-parser-js@0.7.28,"",CVE-2022-25927,CWE-1333 Inefficient Regular Expression Complexity,"Versions of the package ua-parser-js from 0.7.30 and before 0.7.33, from 0.8.1 and before 1.0.33 are vulnerable to Regular Expression Denial of Service (ReDoS) via the trim() function.",NVD,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:3.9/RC:R/MAV:A,"","","",HIGHEST,3,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",undici:6.19.7,/github/workspace/package-lock.json?/undici:6.19.7,"An HTTP/1.1 client, written from scratch for Node.js",MIT,"","",pkg:npm/undici@6.19.7,cpe:2.3:a:nodejs:undici:6.19.7:*:*:*:*:*:*:*,CVE-2025-22150,CWE-330 Use of Insufficiently Random Values,"Undici is an HTTP/1.1 client. Starting in version 4.5.0 and prior to versions 5.28.5, 6.21.1, and 7.2.3, undici uses `Math.random()` to choose the boundary for a multipart/form-data request. It is known that the output of `Math.random()` can be predicted if several of its generated values are known. If there is a mechanism in an app that sends multipart requests to an attacker-controlled website, they can use this to leak the necessary values. Therefore, an attacker can tamper with the requests going to the backend APIs if certain conditions are met. This is fixed in versions 5.28.5, 6.21.1, and 7.2.3. As a workaround, do not issue multipart requests to attacker controlled servers.  Sonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2025-22150 for details",OSSINDEX,HIGH,7.599999904632568,CVSS:4.0/AV:N/AC:L/AT:P/PR:N/UI:P/VC:H/VI:H/VA:N/SC:N/SI:N/SA:N,"","","","","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",undici:6.19.7,/github/workspace/package-lock.json?/undici:6.19.7,"An HTTP/1.1 client, written from scratch for Node.js",MIT,"","",pkg:npm/undici@6.19.7,cpe:2.3:a:nodejs:undici:6.19.7:*:*:*:*:*:*:*,GHSA-c76h-2ccp-4975,CWE-330 Use of Insufficiently Random Values,"### Impact  [Undici `fetch()` uses Math.random()](https://github.com/nodejs/undici/blob/8b06b8250907d92fead664b3368f1d2aa27c1f35/lib/web/fetch/body.js#L113) to choose the boundary for a multipart/form-data request. It is known that the output of Math.random() can be predicted if several of its generated values are known.  If there is a mechanism in an app that sends multipart requests to an attacker-controlled website, they can use this to leak the necessary values. Therefore, An attacker can tamper with the requests going to the backend APIs if certain conditions are met.  ### Patches  This is fixed in 5.28.5; 6.21.1; 7.2.3.  ### Workarounds  Do not issue multipart requests to attacker controlled servers.  ### References  * https://hackerone.com/reports/2913312 * https://blog.securityevaluators.com/hacking-the-javascript-lottery-80cc437e3b7f",NPM,"","","",MEDIUM,6.800000190734863,CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:N,"","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",undici:6.19.7,/github/workspace/package-lock.json?/undici:6.19.7,"An HTTP/1.1 client, written from scratch for Node.js",MIT,"","",pkg:npm/undici@6.19.7,cpe:2.3:a:nodejs:undici:6.19.7:*:*:*:*:*:*:*,GHSA-cxrh-j4jr-qwg3,CWE-401 Missing Release of Memory after Effective Lifetime,"### Impact  Applications that use undici to implement a webhook-like system are vulnerable. If the attacker set up a server with an invalid certificate, and they can force the application to call the webhook repeatedly, then they can cause a memory leak.   ### Patches  This has been patched in https://github.com/nodejs/undici/pull/4088.  ### Workarounds  If a webhook fails, avoid keep calling it repeatedly.  ### References  Reported as: https://github.com/nodejs/undici/issues/3895",NPM,"","","",LOW,3.0999999046325684,CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L,"","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",undici:6.19.7,/github/workspace/package-lock.json?/undici:6.19.7,"An HTTP/1.1 client, written from scratch for Node.js",MIT,"","",pkg:npm/undici@6.19.7,cpe:2.3:a:nodejs:undici:6.19.7:*:*:*:*:*:*:*,CVE-2025-47279,CWE-401 Missing Release of Memory after Effective Lifetime,"Undici is an HTTP/1.1 client for Node.js. Prior to versions 5.29.0, 6.21.2, and 7.5.0, applications that use undici to implement a webhook-like system are vulnerable. If the attacker set up a server with an invalid certificate, and they can force the application to call the webhook repeatedly, then they can cause a memory leak. This has been patched in versions 5.29.0, 6.21.2, and 7.5.0. As a workaound, avoid calling a webhook repeatedly if the webhook fails.",OSSINDEX,LOW,2.299999952316284,CVSS:4.0/AV:N/AC:L/AT:P/PR:L/UI:N/VC:N/VI:N/VA:L/SC:N/SI:N/SA:N,"","","","","","",HIGHEST,7,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",word-wrap:1.2.3,/github/workspace/package-lock.json?/word-wrap:1.2.3,Wrap words to a specified length.,MIT,"","",pkg:npm/word-wrap@1.2.3,cpe:2.3:a:word-wrap_project:word-wrap:1.2.3:*:*:*:*:*:*:*,CVE-2023-26115,CWE-1333 Inefficient Regular Expression Complexity,All versions of the package word-wrap are vulnerable to Regular Expression Denial of Service (ReDoS) due to the usage of an insecure regular expression within the result variable.,NVD,"","","",HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:3.9/RC:R/MAV:A,"","","",HIGHEST,8,"","","","","","","",""
laboratorio-final-devsecops,"Mon, 7 Jul 2025 03:45:46 GMT",word-wrap:1.2.3,/github/workspace/package-lock.json?/word-wrap:1.2.3,Wrap words to a specified length.,MIT,"","",pkg:npm/word-wrap@1.2.3,cpe:2.3:a:word-wrap_project:word-wrap:1.2.3:*:*:*:*:*:*:*,GHSA-j8xg-fqg3-53r7,CWE-1333 Inefficient Regular Expression Complexity,All versions of the package word-wrap are vulnerable to Regular Expression Denial of Service (ReDoS) due to the usage of an insecure regular expression within the result variable.,NPM,"","","",MEDIUM,5.300000190734863,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L,"","","",HIGHEST,8,"","","","","","","",""
