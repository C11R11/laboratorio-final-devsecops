name: workflow
on:
  push:
    branches: [ main, develop, feat/*, fix/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  sast:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      security-events: write
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Important for SonarCloud analysis
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci

    - name: Debug token (first 10 chars)
      run: |
        echo "Secret exists: ${{ secrets.SONAR_TOKEN != '' }}"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Commit:  ${{ github.ref_name }}"
       
    
    - name: Show analysis completion
      run: |
        echo "SonarCloud SAST analysis completed!"
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@v5.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Validando resultado de SonarCloud
      run: |
        projectKey="C11R11_laboratorio-final-devsecops"
        branchName="${{ github.ref_name }}"
    
        issueCount=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
          "https://sonarcloud.io/api/issues/search?componentKeys=${projectKey}&branch=${branchName}&types=VULNERABILITY&severities=BLOCKER,CRITICAL,MAJOR" \
          | jq '.total')

        echo "Vulnerabilidades críticas/altas/medias encontradas: $issueCount"

        if [ "$issueCount" -gt 0 ]; then
          echo "Se encontraron vulnerabilidades críticas, altas o medias. Deteniendo el pipeline..."
          exit 1
        else
          echo "No se encontraron vulnerabilidades críticas, altas ni medias. Continuando..."
        fi

    - name: Download SonarQube Report
      run: |
        projectKey="C11R11_laboratorio-final-devsecops"
        branchName="${{ github.ref_name }}"
        
        # Create reports directory
        mkdir -p sonarqube-reports
        
        # Download issues report in JSON format
        curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
          "https://sonarcloud.io/api/issues/search?componentKeys=${projectKey}&branch=${branchName}&types=VULNERABILITY,BUG,CODE_SMELL&ps=500" \
          | jq '.' > sonarqube-reports/issues-report.json
        
        # Download hotspots report
        curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
          "https://sonarcloud.io/api/hotspots/search?projectKey=${projectKey}&branch=${branchName}&ps=500" \
          | jq '.' > sonarqube-reports/hotspots-report.json
        
        # Download measures report
        curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
          "https://sonarcloud.io/api/measures/component?component=${projectKey}&branch=${branchName}&metricKeys=bugs,vulnerabilities,code_smells,security_hotspots,coverage,duplicated_lines_density,maintainability_rating,reliability_rating,security_rating" \
          | jq '.' > sonarqube-reports/measures-report.json
        
        # Generate summary report
        echo "# SonarQube Analysis Report" > sonarqube-reports/summary.md
        echo "Generated on: $(date)" >> sonarqube-reports/summary.md
        echo "Branch: ${branchName}" >> sonarqube-reports/summary.md
        echo "Project: ${projectKey}" >> sonarqube-reports/summary.md
        echo "" >> sonarqube-reports/summary.md
        
        # Extract and display key metrics
        if [ -f sonarqube-reports/measures-report.json ]; then
          echo "## Key Metrics" >> sonarqube-reports/summary.md
          echo "" >> sonarqube-reports/summary.md
          
          bugs=$(jq -r '.component.measures[] | select(.metric=="bugs") | .value // "0"' sonarqube-reports/measures-report.json)
          vulnerabilities=$(jq -r '.component.measures[] | select(.metric=="vulnerabilities") | .value // "0"' sonarqube-reports/measures-report.json)
          code_smells=$(jq -r '.component.measures[] | select(.metric=="code_smells") | .value // "0"' sonarqube-reports/measures-report.json)
          security_hotspots=$(jq -r '.component.measures[] | select(.metric=="security_hotspots") | .value // "0"' sonarqube-reports/measures-report.json)
          coverage=$(jq -r '.component.measures[] | select(.metric=="coverage") | .value // "0"' sonarqube-reports/measures-report.json)
          
          echo "- **Bugs**: ${bugs}" >> sonarqube-reports/summary.md
          echo "- **Vulnerabilities**: ${vulnerabilities}" >> sonarqube-reports/summary.md
          echo "- **Code Smells**: ${code_smells}" >> sonarqube-reports/summary.md
          echo "- **Security Hotspots**: ${security_hotspots}" >> sonarqube-reports/summary.md
          echo "- **Code Coverage**: ${coverage}%" >> sonarqube-reports/summary.md
          echo "" >> sonarqube-reports/summary.md
        fi
        
        # Extract and display critical issues
        if [ -f sonarqube-reports/issues-report.json ]; then
          echo "## Critical Issues" >> sonarqube-reports/summary.md
          echo "" >> sonarqube-reports/summary.md
          
          critical_issues=$(jq -r '.issues[] | select(.severity=="BLOCKER" or .severity=="CRITICAL") | "- \(.severity): \(.message) (Line \(.line))"' sonarqube-reports/issues-report.json)
          
          if [ -n "$critical_issues" ]; then
            echo "$critical_issues" >> sonarqube-reports/summary.md
          else
            echo "No critical issues found." >> sonarqube-reports/summary.md
          fi
          echo "" >> sonarqube-reports/summary.md
        fi
        
        echo "## Report Files" >> sonarqube-reports/summary.md
        echo "" >> sonarqube-reports/summary.md
        echo "- issues-report.json: Detailed list of all issues" >> sonarqube-reports/summary.md
        echo "- hotspots-report.json: Security hotspots analysis" >> sonarqube-reports/summary.md
        echo "- measures-report.json: Project metrics and measures" >> sonarqube-reports/summary.md
        echo "- summary.md: This summary report" >> sonarqube-reports/summary.md
        
        echo "✅ SonarQube reports generated successfully"

    - name: Upload SonarQube Reports as Artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sonarqube-analysis-reports
        path: sonarqube-reports/
        retention-days: 30